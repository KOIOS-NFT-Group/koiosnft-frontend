{"version":3,"sources":["assets/placeholder.jpg","components/NftComponent.tsx","components/Collection.tsx","components/ContentBody.tsx","components/ContentHeader.tsx","components/Content.tsx","services/NetworkTracker.tsx","components/AuthenticationButton.tsx","components/ThemeButton.tsx","components/NetworkButton.tsx","components/Navbar.tsx","services/init.js","pages/Dashboard.tsx","services/ContractABI.ts","assets/hooray.gif","components/MintBody.tsx","components/MintComponent.tsx","pages/Mint.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NftComponent","token_address","token_id","metadata","owner_of","contract_type","token_uri","name","amount","symbol","symbolTrimmed","length","slice","tokenId","meta","JSON","parse","overflow","p","minWidth","maxWidth","minHeight","maxHeight","border","borderRadius","ml","borderColor","boxSize","objectFit","alt","src","ipfsLink","image","startsWith","ipfs","fontSize","align","px","m","colorScheme","fontWeight","PlaceholderIMG","size","status","Collection","props","collectionName","mt","minChildWidth","spacing","collectionValues","map","nft","i","ContentBody","chainId","useMoralis","isAuthenticated","user","account","useMoralisWeb3Api","useState","mappedItems","setMappedItems","mapIt","nftArray","mapping","Map","has","arrayOfItems","nft2","push","set","createMappingArray","mappingArray","entries","key","mapItems","useEffect","userAddr","get","a","getNFTs","chain","address","response","result","sort","b","mapped","fetchNFTs","values","ContentHeader","nfts","setNfts","numberOf","collectedNFTs","useBreakpointValue","base","md","pl","lg","collectedAmount","addrSize","Content","useColorModeValue","h","templateRows","rowSpan","overflowX","overflowY","logout","Moralis","Web3","onAccountsChanged","window","location","reload","checkWeb3","SetWeb3Environment","AuthButtons","hasWeb3","authenticate","isAuthenticating","valuesConnected","toast","useToast","onClick","title","duration","isClosable","isLoading","signingMessage","ThemeButton","useColorMode","colorMode","toggleColorMode","Sun","color","Moon","NetworkButton","niceName","charAt","toUpperCase","variant","isDisabled","showTitle","templateColumns","colSpan","to","float","showMobile","width","Navbar","web3","undefined","initWeb3","ethereum","currentProvider","getNetwork","eth","net","getId","getNetworkName","chainID","Dashboard","re","setRe","setWeb3","setChainId","onChainChanged","console","log","hasMetamask","getTheChainId","className","href","isExternal","ABI","inputs","internalType","type","stateMutability","anonymous","indexed","outputs","MintBody","txHash","setTxHash","confirmed","setConfirmation","contract","mintToken","enable","getAccounts","accounts","Contract","defaultChain","methods","mint","send","from","value","utils","toWei","on","hash","url","target","rel","renderHash","mb","confirmationHooray","MintComponent","Mint","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"ocAAe,MAA0B,wC,OC6I1BA,EAvIM,SAAC,GAUX,EATTC,cASU,IARVC,EAQS,EARTA,SAIAC,GAIS,EAPTC,SAOS,EANTC,cAMS,EALTC,UAKS,EAJTH,UAEAI,GAES,EAHTC,OAGS,EAFTD,MACAE,EACS,EADTA,OAiCIC,EAtBa,OAAXD,EACEA,EAAOE,OAAS,EACXF,EAAOG,MAAM,EAAG,GAEhBH,EAGF,GAgBPI,EA/BEX,EAASS,OAAS,EACbT,EAASU,MAAM,EAAG,GAAK,MAEvBV,EA8BX,GAAIC,EAAU,CACZ,IAAIW,EAAiBC,KAAKC,MAAMb,GAEhC,OACE,cAAC,IAAD,CACEc,SAAS,SACTC,EAAG,EACHC,SAAS,QACTC,SAAS,QACTC,UAAU,OACVC,UAAU,OACVC,OAAO,MACPC,aAAa,OACbC,GAAI,EACJC,YAAY,sBAVd,SAYE,eAAC,IAAD,WACE,cAAC,IAAD,CACED,GAAI,EACJE,QAAQ,QACRH,aAAa,OACbI,UAAU,UACVC,IAAKf,EAAKP,KACVuB,IArCG,WACX,IAAIhB,EAAiBC,KAAKC,MAAMb,GAC5B4B,EAAmB,uBACvB,OAAIjB,EAAKkB,OAASlB,EAAKkB,MAAMC,WAAW,QACtCF,GAAsBjB,EAAKkB,MAAMpB,MAAM,GAGhCE,EAAKkB,MA8BDE,KAEP,cAAC,IAAD,CAASC,SAAS,KAAKC,MAAM,SAA7B,SACG7B,IAEH,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiB,aAAa,MAAMa,GAAG,IAAIC,EAAG,EAAGC,YAAY,OAAnD,SACG7B,IAEH,eAAC,IAAD,CAAOc,aAAa,MAAMa,GAAG,IAAIC,EAAG,EAAGC,YAAY,OAAnD,eACK1B,QAGP,cAAC,IAAD,CACEW,aAAa,MACba,GAAG,IACHC,EAAG,EACHE,WAAW,OACXJ,MAAM,SALR,SAOGtB,EAAKP,eAOhB,OACE,cAAC,IAAD,CACEU,SAAS,SACTC,EAAG,EACHK,OAAO,MACPC,aAAa,OACbc,EAAG,EACHZ,YAAY,sBANd,SAQE,eAAC,IAAD,WACE,cAAC,IAAD,CACEF,aAAa,OACbG,QAAQ,QACRC,UAAU,QACVE,IAAKW,IAEP,eAAC,IAAD,WACE,cAAC,IAAD,CAASN,SAAS,KAAKC,MAAM,SAA7B,SACG7B,IAEH,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiB,aAAa,MAAMa,GAAG,IAAIC,EAAG,EAAGC,YAAY,OAAnD,SACG7B,IAEH,eAAC,IAAD,CAAOc,aAAa,MAAMa,GAAG,IAAIC,EAAG,EAAGC,YAAY,OAAnD,eACK1B,QAGP,eAAC,IAAD,CAAO6B,KAAK,MAAMC,OAAO,QAAQnB,aAAa,MAA9C,UACE,cAAC,IAAD,IADF,qCC1FGoB,EA3BI,SAACC,GAClB,OACE,mCACE,eAAC,IAAD,CACE5B,SAAS,SACTC,EAAG,EACHC,SAAS,OACTI,OAAO,MACPC,aAAa,OACbc,EAAG,EACHZ,YAAY,sBAPd,UASE,eAAC,IAAD,WACE,cAAC,IAAD,UAAUmB,EAAMC,iBAChB,cAAC,IAAD,CAASvB,OAAO,WAElB,cAAC,IAAD,CAAYwB,GAAI,EAAGC,cAAc,QAAQC,QAAQ,MAAjD,SACGJ,EAAMK,kBACLL,EAAMK,iBAAiBC,KAAI,SAACC,EAAUC,GAAX,OACzB,cAAC,EAAD,eAA0BD,GAAPC,cCiGlBC,EAzHK,SAAC,GAA+B,EAA7BC,QAA8B,IAArBhD,EAAoB,EAApBA,KAC9B,EAAkCiD,cAA1BC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,KAEjBC,EAAYC,cAAZD,QAGR,EAAsCE,mBADJ,IAClC,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAQ,SAACC,GACb,IADqD,EACjDC,EAAU,IAAIC,IADmC,cAErCF,GAFqC,IAErD,2BAA0B,CAAC,IAAlBb,EAAiB,QACxB,IAAKc,EAAQE,IAAIhB,EAAInD,eAAgB,CACnC,IADmC,EAC/BoE,EAAsB,GADS,cAElBJ,GAFkB,IAEnC,2BAA2B,CAAC,IAAnBK,EAAkB,QACrBA,EAAKrE,eAAiBmD,EAAInD,eAC5BoE,EAAaE,KAAKD,IAJa,8BAOnCJ,EAAQM,IAAIpB,EAAI7C,KAAM8D,KAV2B,8BAarD,OAAOH,GAGHO,EAAqB,SAACP,GAC1B,IADqE,EACjEQ,EAA0B,GADuC,cAErDR,EAAQS,WAF6C,IAErE,2BAAmC,CAAC,IAA3BC,EAA0B,QAC7BzB,EAAe0B,EAASD,EAAI,GAAIA,EAAI,IACxCF,EAAaH,KAAKpB,IAJiD,8BAMrE,OAAOuB,GAGTI,qBAAU,WACR,GAAIrB,EACF,OAAQlD,GACN,IAAK,MACH,IAAMwE,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,gCAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,MACPC,QAASL,IAHK,OACVM,EADU,QAKVpB,EAAWoB,EAASC,QACjBC,MAAK,SAACN,EAAGO,GAAJ,OACZP,EAAE1E,KAAOiF,EAAEjF,KAAO,EAAIiF,EAAEjF,KAAO0E,EAAE1E,MAAQ,EAAI,KAG3CkF,EAA6BzB,EAAMC,GAEvCF,EAAeU,EAAmBgB,IAZlB,2CAAH,qDAcfC,GACA,MAEF,IAAK,UACH,IAAMX,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,gCAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,UACPC,QAASL,IAHK,OACVM,EADU,QAKVpB,EAAWoB,EAASC,QACjBC,MAAK,SAACN,EAAGO,GAAJ,OACZP,EAAE1E,KAAOiF,EAAEjF,KAAO,EAAIiF,EAAEjF,KAAO0E,EAAE1E,MAAQ,EAAI,KAG3CkF,EAA6BzB,EAAMC,GAEvCF,EAAeU,EAAmBgB,IAZlB,2CAAH,qDAcfC,GACA,MAEF,IAAK,UACH,IAAMX,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,gCAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,UACPC,QAASL,IAHK,OACVM,EADU,QAKVpB,EAAWoB,EAASC,QACjBC,MAAK,SAACN,EAAGO,GAAJ,OACZP,EAAE1E,KAAOiF,EAAEjF,KAAO,EAAIiF,EAAEjF,KAAO0E,EAAE1E,MAAQ,EAAI,KAE3CkF,EAA6BzB,EAAMC,GAEvCF,EAAeU,EAAmBgB,IAXlB,2CAAH,qDAafC,MAKL,CAACnF,EAAM,KAEV,IAAMsE,EAAW,SAACD,EAAae,GAK7B,MAJsB,CACpB7C,eAAgB8B,EAChB1B,iBAAkByC,IAoBtB,OAAO,8BAdDlC,EAEA,cAAC,IAAD,UACGK,GACCA,EAAYX,KAAI,SAACA,EAAcE,GAAf,OACd,cAAC,EAAD,eAAwBF,GAAPE,QAKlB,gC,8BCPEuC,EAvGO,SAAC,GAA+B,EAA7BrC,QAA8B,IAArBhD,EAAoB,EAApBA,KAChC,EAAkCiD,cAA1BC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,KACjBC,EAAYC,cAAZD,QACR,EAAwBE,mBAAS,GAAjC,mBAAOgC,EAAP,KAAaC,EAAb,KAEAhB,qBAAU,WACR,GAAIrB,EACF,OAAQlD,GACN,IAAK,MACH,IAAMwE,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,8BAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,MACPC,QAASL,IAHK,OACVM,EADU,OAKVU,EAAWV,EAASC,OAAQ3E,OAClCmF,EAAQC,GANQ,2CAAH,qDAQfL,GACA,MAEF,IAAK,UACH,IAAMX,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,8BAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,UACPC,QAASL,IAHK,OACVM,EADU,OAKVU,EAAWV,EAASC,OAAQ3E,OAClCmF,EAAQC,GANQ,2CAAH,qDAQfL,GACA,MAEF,IAAK,UACH,IAAMX,EAAQ,OAAGrB,QAAH,IAAGA,OAAH,EAAGA,EAAMsB,IAAI,eACZ,uCAAG,8BAAAC,EAAA,sEACOtB,EAAQuB,QAAQ,CACrCC,MAAO,UACPC,QAASL,IAHK,OACVM,EADU,OAKVU,EAAWV,EAASC,OAAQ3E,OAClCmF,EAAQC,GANQ,2CAAH,qDAQfL,OAOR,IAaMM,EAAgBC,YAAmB,CAAEC,KAAM,GAAIC,GAb7B,WACtB,GAAI1C,EACF,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASvC,EAAG,EAAGkF,GAAI,EAAGjE,SAAU,CAAE+D,KAAM,KAAMG,GAAI,OAAlD,4BAGA,cAAC,IAAD,CAAMD,GAAI,EAAV,SAAcP,OAMmCS,KAEnDC,EAAWN,YAAmB,CAAEC,KAAM,KAAMC,GAAI,OAmCtD,OAfI,8BACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,CAASjF,EAAG,EAAGkF,GAAI,EAAGjE,SAAU,CAAE+D,KAAM,KAAMG,GAAI,OAAlD,UACG9F,EADH,sBApBJkD,EAEA,cAAC,IAAD,CAAMjB,WAAW,OAAO4D,GAAI,EAAGjE,SAAUoE,EAAzC,gBACG7C,QADH,IACGA,OADH,EACGA,EAAMsB,IAAI,gBAKb,cAAC,IAAD,CAAMxC,WAAW,OAAO4D,GAAI,EAA5B,6CAiBE,cAAC,IAAD,IACCJ,QC3EIQ,EA3BC,SAAC,GAAgC,IAA9BjD,EAA6B,EAA7BA,QAAShD,EAAoB,EAApBA,KAC1B,OACE,eAAC,IAAD,CACEW,EAAG,EACHK,OAAO,MACPC,aAAa,OACbc,EAAG,EACHZ,YAAa+E,YACX,sBACA,wBAEFC,EAAE,MACFC,aAAa,iBAVf,UAYE,cAAC,IAAD,CAAUC,QAAS,EAAnB,SACE,cAAC,EAAD,CAAerD,QAASA,EAAShD,KAAMA,MAEzC,cAAC,IAAD,CAAUqG,QAAS,EAAnB,SACE,cAAC,IAAD,CAASrF,OAAO,UAElB,cAAC,IAAD,CAAUwB,IAAK,GAAI6D,QAAS,EAAGC,UAAU,SAASC,UAAU,SAA5D,SACE,cAAC,EAAD,CAAavD,QAASA,EAAShD,KAAMA,U,iFCpB7C,8BAAA0E,EAAA,wDACqBzB,cAAXuD,EADV,EACUA,OAERC,IAAQC,KAAKC,mBAAkB,WAC7BC,OAAOC,SAASC,SAChBN,OALJ,4C,sBASeO,MAbf,Y,mCACEC,IC+EaC,EA3EK,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACrB,EACEjE,cADMkE,EAAR,EAAQA,aAAcjE,EAAtB,EAAsBA,gBAAiBkE,EAAvC,EAAuCA,iBAAkBZ,EAAzD,EAAyDA,OAGnDpB,EAASM,YAAmB,CAChCC,KAAM,uBACNC,GAAI,gCAGAyB,EAAkB3B,YAAmB,CACzCC,KAAM,qBAGF2B,EAAQC,cA2Dd,OA9CER,IACKG,EAeChE,EAEA,cAAC,IAAD,CACEnB,EAAG,EACHH,SAAU,CAAE+D,KAAM,KAAMC,GAAI,KAAME,GAAI,MACtC0B,QAAS,WA/BjBhB,IACAc,EAAM,CACJG,MAAO,2BACPrF,OAAQ,QACRsF,SAAU,IACVC,YAAY,KAuBR,SAOGN,IAKH,cAAC,IAAD,CACEtF,EAAG,EACH6F,UAAWR,EACXI,QAAS,WACPL,EAAa,CACXU,eAAgB,kDALtB,SASGzC,IApCL,cAAC,IAAD,CACErD,EAAG,EACHH,SAAU,CAAE+D,KAAM,KAAMC,GAAI,KAAME,GAAI,MACtC0B,QAAS,WACPL,EAAa,CACXU,eAAgB,kDALtB,yD,oBC1BOC,MARf,WACE,MAAuCC,cAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBACnB,OACE,cAAC,IAAD,CAAQT,QAASS,EAAiBlG,EAAG,EAArC,SACiB,UAAdiG,EAAwB,cAACE,EAAA,EAAD,CAASC,MAAM,aAAgB,cAACC,EAAA,EAAD,OCa/CC,EAjBO,SAAC,GAA+B,EAA7BrF,QAA8B,IAArBhD,EAAoB,EAApBA,KAS5BsI,EAPEtI,EACKA,EAAKuI,OAAO,GAAGC,cAAgBxI,EAAKK,MAAM,GAE1C,eAMX,OACE,cAAC,IAAD,CAAQoI,QAAQ,UAAUC,YAAU,EAAC3G,EAAG,EAAxC,SACGuG,KCEDK,G,QAAY,SAAC,GAAgC,IAA9B3F,EAA6B,EAA7BA,QAAShD,EAAoB,EAApBA,KAC5B,OACE,eAAC,IAAD,CACEW,EAAG,EACHK,OAAO,MACPC,aAAa,OACbc,EAAG,EACHZ,YAAY,uBACZyH,gBAAgB,iBANlB,UAQE,cAAC,IAAD,CAAUC,QAAS,EAAnB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKlI,EAAE,IAAP,SACE,cAAC,IAAD,CAASmI,GAAG,aAAZ,SACE,cAAC,IAAD,CAAQlH,SAAU,CAAE+D,KAAM,KAAMG,GAAI,OAApC,2BAGJ,cAAC,IAAD,CAAKnF,EAAE,IAAP,SACE,cAAC,IAAD,CAASmI,GAAG,QAAZ,SACE,cAAC,IAAD,CAAQlH,SAAU,CAAE+D,KAAM,KAAMG,GAAI,OAApC,2BAKR,cAAC,IAAD,CAAU+C,QAAS,EAAnB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKlI,EAAE,IAAP,SACE,cAAC,IAAD,CAASiB,SAAU,CAAE+D,KAAM,KAAMG,GAAI,OAArC,iCAMN,cAAC,IAAD,CAAU+C,QAAS,EAAnB,SACE,eAAC,IAAD,CAAKE,MAAM,QAAX,UACE,cAAC,EAAD,CAAe/F,QAASA,EAAShD,KAAMA,IACvC,cAAC,EAAD,CAAakH,SAAS,IACtB,cAAC,EAAD,cAOJ8B,EAAa,SAAC,GAAgC,IAA9BhG,EAA6B,EAA7BA,QAAShD,EAAoB,EAApBA,KAC7B,OACE,mCACE,eAAC,IAAD,CAAYyC,cAAc,QAA1B,UACE,cAAC,IAAD,CAASqG,GAAG,aAAZ,SACE,cAAC,IAAD,CAAQ/G,EAAG,EAAGkH,MAAM,MAApB,yBAIF,cAAC,IAAD,CAASH,GAAG,QAAZ,SACE,cAAC,IAAD,CAAQ/G,EAAG,EAAGkH,MAAM,MAApB,oBAIF,cAAC,EAAD,CAAejG,QAASA,EAAShD,KAAMA,IACvC,cAAC,EAAD,CAAakH,SAAS,IACtB,cAAC,EAAD,UAcOgC,EARA,SAAC,GAAgC,IAA9BlG,EAA6B,EAA7BA,QAAShD,EAAoB,EAApBA,KACnByH,EAAQ/B,YAAmB,CAC/BC,KAAMqD,EAAW,CAAEhG,UAAShD,SAC5B4F,GAAI+C,EAAU,CAAE3F,UAAShD,WAG3B,OAAO,mCAAGyH,K,mBCxFR0B,QAAOC,EAEJ,SAAeC,KAAtB,gC,8CAAO,sBAAA3E,EAAA,0DACDkC,OAAO0C,SADN,uBAEHH,GAAO,IAAIzC,KAAKE,OAAO0C,UAFpB,mBAGI,GAHJ,WAIM1C,OAAOuC,KAJb,uBAKHA,GAAO,IAAIzC,KAAKE,OAAOuC,KAAKI,iBALzB,mBAMI,GANJ,iCASE,GATF,4C,sBAYA,SAAeC,KAAtB,gC,8CAAO,sBAAA9E,EAAA,0DACDkC,OAAO0C,WAAY1C,OAAOuC,KADzB,yCAEIA,GAAKM,IAAIC,IAAIC,SAFjB,4C,sBAMA,SAASC,GAAeC,GAM7B,MALe,CACb,EAAG,MACH,EAAG,UACH,IAAK,WAESA,GCkDHC,OArEf,WACE,MAAoBxG,oBAAS,GAA7B,mBAAOyG,EAAP,KAAWC,EAAX,KAEA,EAA2B1G,oBAAS,GAApC,mBAAO4D,EAAP,KAAgB+C,EAAhB,KAGA,EAA8B3G,mBADD,GAC7B,mBAAON,EAAP,KAAgBkH,EAAhB,KA0BA,OAxBAzD,IAAQC,KAAKyD,gBAAe,WAC1BH,GAAOD,MAGTxF,qBAAU,WAAM,4CACd,4BAAAG,EAAA,sEACqB2E,KADrB,OACMtE,EADN,OAGIkF,IADElF,GAFN,4CADc,kEASd,4BAAAL,EAAA,sEACqB8E,KADrB,QACMzE,EADN,QAGImF,EAAWnF,GAEXqF,QAAQC,IAAI,4BALhB,4CATc,uBAAC,WAAD,wBAOdC,GAPc,mCAiBdC,MAGErD,EAEA,eAAC,IAAD,CAAMd,aAAa,iBAAiBD,EAAE,QAAtC,UACE,cAAC,IAAD,CAAUE,QAAS,EAAnB,SACE,cAAC,EAAD,CAAQrD,QAASA,EAAShD,KAAM4J,GAAe5G,OAEjD,cAAC,IAAD,CAAUqD,QAAS,EAAnB,SACE,cAAC,EAAD,CAASrD,QAASA,EAAShD,KAAM4J,GAAe5G,UAMpD,qBAAKwH,UAAU,mBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMzI,EAAG,EAAGE,WAAW,OAAvB,kFAGA,cAAC,IAAD,CAAQuF,QAAS,kBAAMZ,OAAOC,SAASC,UAAvC,kCACA,cAAC,IAAD,CACE2D,KAAK,sFACLC,YAAU,EAFZ,SAIE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,sCAEF,cAAC,IAAD,CAAMgC,KAAK,uCAAuCC,YAAU,EAA5D,SACE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,sCAEF,cAAC,IAAD,CAAMgC,KAAK,uCAAuCC,YAAU,EAA5D,SACE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,6CCgPGkC,GAtTH,CACV,CACEC,OAAQ,CACN,CAAEC,aAAc,SAAU7K,KAAM,QAAS8K,KAAM,UAC/C,CAAED,aAAc,SAAU7K,KAAM,UAAW8K,KAAM,WAEnDC,gBAAiB,aACjBD,KAAM,eAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd7K,KAAM,QACN8K,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACd7K,KAAM,WACN8K,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACd7K,KAAM,UACN8K,KAAM,YAGV9K,KAAM,WACN8K,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd7K,KAAM,QACN8K,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACd7K,KAAM,WACN8K,KAAM,WAER,CAAEG,SAAS,EAAOJ,aAAc,OAAQ7K,KAAM,WAAY8K,KAAM,SAElE9K,KAAM,iBACN8K,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd7K,KAAM,gBACN8K,KAAM,WAER,CACEG,SAAS,EACTJ,aAAc,UACd7K,KAAM,WACN8K,KAAM,YAGV9K,KAAM,uBACN8K,KAAM,SAER,CACEE,WAAW,EACXJ,OAAQ,CACN,CAAEK,SAAS,EAAMJ,aAAc,UAAW7K,KAAM,OAAQ8K,KAAM,WAC9D,CAAEG,SAAS,EAAMJ,aAAc,UAAW7K,KAAM,KAAM8K,KAAM,WAC5D,CACEG,SAAS,EACTJ,aAAc,UACd7K,KAAM,UACN8K,KAAM,YAGV9K,KAAM,WACN8K,KAAM,SAER,CACEF,OAAQ,GACR5K,KAAM,QACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,uBACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,KAAM8K,KAAM,WAC7C,CAAED,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAEpD9K,KAAM,UACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,QAAS8K,KAAM,YACzD9K,KAAM,YACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,oBACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAC3D9K,KAAM,OACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAC3D9K,KAAM,cACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,aACNkL,QAAS,CAAC,CAAEL,aAAc,SAAU7K,KAAM,GAAI8K,KAAM,WACpDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,QAAS8K,KAAM,WAChD,CAAED,aAAc,UAAW7K,KAAM,WAAY8K,KAAM,YAErD9K,KAAM,mBACNkL,QAAS,CAAC,CAAEL,aAAc,OAAQ7K,KAAM,GAAI8K,KAAM,SAClDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,MAAO8K,KAAM,YACvD9K,KAAM,OACNkL,QAAS,GACTH,gBAAiB,UACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,OACNkL,QAAS,CAAC,CAAEL,aAAc,SAAU7K,KAAM,GAAI8K,KAAM,WACpDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,QACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAC3D9K,KAAM,UACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,oBACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,OAAQ8K,KAAM,WAC/C,CAAED,aAAc,UAAW7K,KAAM,KAAM8K,KAAM,WAC7C,CAAED,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAEpD9K,KAAM,mBACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,OAAQ8K,KAAM,WAC/C,CAAED,aAAc,UAAW7K,KAAM,KAAM8K,KAAM,WAC7C,CAAED,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,WAClD,CAAED,aAAc,QAAS7K,KAAM,QAAS8K,KAAM,UAEhD9K,KAAM,mBACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,WAAY8K,KAAM,WACnD,CAAED,aAAc,OAAQ7K,KAAM,WAAY8K,KAAM,SAElD9K,KAAM,oBACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,SAAU7K,KAAM,UAAW8K,KAAM,WAC1D9K,KAAM,aACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,SAAU7K,KAAM,cAAe8K,KAAM,WAC9D9K,KAAM,oBACNkL,QAAS,CAAC,CAAEL,aAAc,OAAQ7K,KAAM,GAAI8K,KAAM,SAClDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,SACNkL,QAAS,CAAC,CAAEL,aAAc,SAAU7K,KAAM,GAAI8K,KAAM,WACpDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,QAAS8K,KAAM,YACzD9K,KAAM,eACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,QAAS8K,KAAM,WAChD,CAAED,aAAc,UAAW7K,KAAM,QAAS8K,KAAM,YAElD9K,KAAM,sBACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAC3D9K,KAAM,WACNkL,QAAS,CAAC,CAAEL,aAAc,SAAU7K,KAAM,GAAI8K,KAAM,WACpDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,cACNkL,QAAS,CAAC,CAAEL,aAAc,UAAW7K,KAAM,GAAI8K,KAAM,YACrDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,CACN,CAAEC,aAAc,UAAW7K,KAAM,OAAQ8K,KAAM,WAC/C,CAAED,aAAc,UAAW7K,KAAM,KAAM8K,KAAM,WAC7C,CAAED,aAAc,UAAW7K,KAAM,UAAW8K,KAAM,YAEpD9K,KAAM,eACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,WAAY8K,KAAM,YAC5D9K,KAAM,oBACNkL,QAAS,GACTH,gBAAiB,aACjBD,KAAM,YAER,CACEF,OAAQ,CAAC,CAAEC,aAAc,UAAW7K,KAAM,SAAU8K,KAAM,YAC1D9K,KAAM,gBACNkL,QAAS,CAAC,CAAEL,aAAc,YAAa7K,KAAM,GAAI8K,KAAM,cACvDC,gBAAiB,OACjBD,KAAM,YAER,CACEF,OAAQ,GACR5K,KAAM,cACNkL,QAAS,GACTH,gBAAiB,UACjBD,KAAM,aCnTK,OAA0B,mCCsH1BK,GApGE,SAAC,GAA+B,EAA7BnI,QAA8B,IAArBhD,EAAoB,EAApBA,KAC3B,EAA4BsD,mBAAS,IAArC,mBAAO8H,EAAP,KAAeC,EAAf,KACA,EAAqC/H,oBAAS,GAA9C,mBAAOgI,EAAP,KAAkBC,EAAlB,KAGIpC,OAAOC,EACPhG,OAAUgG,EACVoC,OAAWpC,EAETqC,EAAS,uCAAG,4BAAA/G,EAAA,sEACH+B,UAAQC,KAAKgF,SADV,cAChBvC,EADgB,gBAGOA,EAAKM,IAAIkC,cAHhB,OAGVC,EAHU,QAKhBJ,EAAW,IAAIrC,EAAKM,IAAIoC,SAASlB,GAVV,+CAWdmB,aAAe,UACxB1I,EAAUwI,EAAS,GAEnBJ,EAASO,QACNC,KAAK,GACLC,KAAK,CACJC,KAAM9I,EACN+I,MAAOzF,KAAK0F,MAAMC,MAAM,QAAS,WAElCC,GAAG,mBAAmB,SAAUC,GAC/BlB,EAAUkB,MAEXD,GAAG,gBAAgB,WAClBf,GAAgB,MAnBJ,4CAAH,qDAuBTnG,EAASM,YAAmB,CAChCC,KACE,cAAC,IAAD,CAAQ8C,QAAQ,UAAUxG,WAAW,OAAOF,EAAG,EAA/C,yBAIF6D,GACE,eAAC,IAAD,CAAQ6C,QAAQ,UAAUxG,WAAW,OAAOF,EAAG,EAA/C,0BACgBqJ,OA6CpB,MAAa,YAATpL,EAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAQ+B,EAAG,EAAGyF,QAAS,kBAAMiE,KAA7B,mBA3Ca,WACjB,GAAc,IAAVL,EAAc,CAChB,IAAMoB,EAAM,mCAAqCpB,EACjD,OACE,mBACEX,KAAM+B,EACNC,OAAO,SACPC,IAAI,WACJjF,MAAM,6BAJR,SAMGrC,KAoCFuH,GA3BDrB,EAEA,eAAC,IAAD,CAAQ3K,EAAG,EAAX,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMiM,GAAI,EAAV,uEAEF,cAAC,IAAD,CACE3L,aAAa,KACbM,IAAKsL,GACLzL,QAAQ,UAEV,cAAC,IAAD,UACE,cAAC,IAAD,CAAMwL,GAAI,EAAV,gEAKN,KAeK,cAAC,IAAD,CAAS7K,EAAG,EAAZ,gDChFI+K,GA5BO,SAAC,GAAgC,IAA9B9J,EAA6B,EAA7BA,QAAShD,EAAoB,EAApBA,KAChC,OACE,cAAC,IAAD,CACEW,EAAG,EACHK,OAAO,MACPC,aAAa,OACbc,EAAG,EACHZ,YAAa+E,YACX,sBACA,wBAEFC,EAAE,MACFC,aAAa,iBAVf,SAYE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUzF,EAAG,EAAG0F,QAAS,EAAGC,UAAU,SAASC,UAAU,SAAzD,SACE,cAAC,IAAD,8BAEF,cAAC,IAAD,CAAU/D,IAAK,GAAI6D,QAAS,EAAGC,UAAU,SAASC,UAAU,SAA5D,SACE,cAAC,GAAD,CAAUvD,QAASA,EAAShD,KAAMA,cCmD/B+M,OArEf,WACE,MAAoBzJ,oBAAS,GAA7B,mBAAOyG,EAAP,KAAWC,EAAX,KAEA,EAA2B1G,oBAAS,GAApC,mBAAO4D,EAAP,KAAgB+C,EAAhB,KAGA,EAA8B3G,mBADD,GAC7B,mBAAON,EAAP,KAAgBkH,EAAhB,KA0BA,OAxBAzD,IAAQC,KAAKyD,gBAAe,WAC1BH,GAAOD,MAGTxF,qBAAU,WAAM,4CACd,4BAAAG,EAAA,sEACqB2E,KADrB,OACMtE,EADN,OAGIkF,IADElF,GAFN,4CADc,kEASd,4BAAAL,EAAA,sEACqB8E,KADrB,QACMzE,EADN,QAGImF,EAAWnF,GAEXqF,QAAQC,IAAI,4BALhB,4CATc,uBAAC,WAAD,wBAOdC,GAPc,mCAiBdC,MAGErD,EAEA,eAAC,IAAD,CAAMd,aAAa,iBAAiBD,EAAE,QAAtC,UACE,cAAC,IAAD,CAAUE,QAAS,EAAnB,SACE,cAAC,EAAD,CAAQrD,QAASA,EAAShD,KAAM4J,GAAe5G,OAEjD,cAAC,IAAD,CAAUqD,QAAS,EAAnB,SACE,cAAC,GAAD,CAAerD,QAASA,EAAShD,KAAM4J,GAAe5G,UAM1D,qBAAKwH,UAAU,mBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMzI,EAAG,EAAGE,WAAW,OAAvB,kFAGA,cAAC,IAAD,CAAQuF,QAAS,kBAAMZ,OAAOC,SAASC,UAAvC,kCACA,cAAC,IAAD,CACE2D,KAAK,sFACLC,YAAU,EAFZ,SAIE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,sCAEF,cAAC,IAAD,CAAMgC,KAAK,uCAAuCC,YAAU,EAA5D,SACE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,sCAEF,cAAC,IAAD,CAAMgC,KAAK,uCAAuCC,YAAU,EAA5D,SACE,cAAC,IAAD,CAAQjC,QAAQ,UAAhB,6CCrDGuE,GAZH,WACV,OACE,cAAC,IAAD,UACE,gCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrD,KACjC,cAAC,IAAD,CAAOoD,KAAK,aAAaC,UAAWrD,KACpC,cAAC,IAAD,CAAOoD,KAAK,QAAQC,UAAWJ,WCIxBK,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sBCFRQ,GAAQC,aAAY,CACxBC,OAAQ,CACNC,iBAAkB,UAOtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAiBC,MALP,2CAKqBC,UAJjB,kDAId,SACE,cAAC,KAAD,CAAgBR,MAAOA,GAAvB,SACE,cAAC,GAAD,UAKNS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.500ca894.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.dd2bd1b6.jpg\";","import { Badge, Box, Center, Heading, Text, VStack } from \"@chakra-ui/layout\";\r\nimport { Metadata } from \"./Metadata\";\r\nimport { NFT } from \"./NFT\";\r\nimport { Alert, AlertIcon, Image } from \"@chakra-ui/react\";\r\nimport PlaceholderIMG from \"../assets/placeholder.jpg\";\r\n\r\nconst NftComponent = ({\r\n  token_address,\r\n  token_id,\r\n  owner_of,\r\n  contract_type,\r\n  token_uri,\r\n  metadata,\r\n  amount,\r\n  name,\r\n  symbol,\r\n}: NFT) => {\r\n  const trimNumber = (): string => {\r\n    if (token_id.length > 5) {\r\n      return token_id.slice(0, 5) + \"...\";\r\n    } else {\r\n      return token_id;\r\n    }\r\n  };\r\n\r\n  const trimSymbol = (): string => {\r\n    if (symbol !== null) {\r\n      if (symbol.length > 5) {\r\n        return symbol.slice(0, 7);\r\n      } else {\r\n        return symbol;\r\n      }\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const ipfs = (): string => {\r\n    let meta: Metadata = JSON.parse(metadata!);\r\n    let ipfsLink: string = \"https://ipfs.io/ipfs\";\r\n    if (meta.image && meta.image.startsWith(\"ipfs\")) {\r\n      ipfsLink = ipfsLink + meta.image.slice(6);\r\n      return ipfsLink;\r\n    } else {\r\n      return meta.image;\r\n    }\r\n  };\r\n\r\n  let symbolTrimmed: string = trimSymbol();\r\n  let tokenId: string = trimNumber();\r\n\r\n  if (metadata) {\r\n    let meta: Metadata = JSON.parse(metadata);\r\n\r\n    return (\r\n      <Box\r\n        overflow=\"scroll\"\r\n        p={2}\r\n        minWidth=\"200px\"\r\n        maxWidth=\"250px\"\r\n        minHeight=\"100%\"\r\n        maxHeight=\"100%\"\r\n        border=\"2px\"\r\n        borderRadius=\"12px\"\r\n        ml={2}\r\n        borderColor=\"rgba(179,184,212,1)\"\r\n      >\r\n        <VStack>\r\n          <Image\r\n            ml={3}\r\n            boxSize=\"220px\"\r\n            borderRadius=\"12px\"\r\n            objectFit=\"contain\"\r\n            alt={meta.name}\r\n            src={ipfs()}\r\n          />\r\n          <Heading fontSize=\"md\" align=\"center\">\r\n            {name}\r\n          </Heading>\r\n          <VStack>\r\n            <Center>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                {symbolTrimmed}\r\n              </Badge>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                # {tokenId}\r\n              </Badge>\r\n            </Center>\r\n            <Text\r\n              borderRadius=\"5px\"\r\n              px=\"5\"\r\n              m={2}\r\n              fontWeight=\"bold\"\r\n              align=\"center\"\r\n            >\r\n              {meta.name}\r\n            </Text>\r\n          </VStack>\r\n        </VStack>\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box\r\n        overflow=\"hidden\"\r\n        p={2}\r\n        border=\"2px\"\r\n        borderRadius=\"12px\"\r\n        m={2}\r\n        borderColor=\"rgba(179,184,212,1)\"\r\n      >\r\n        <VStack>\r\n          <Image\r\n            borderRadius=\"12px\"\r\n            boxSize=\"225px\"\r\n            objectFit=\"cover\"\r\n            src={PlaceholderIMG}\r\n          />\r\n          <VStack>\r\n            <Heading fontSize=\"md\" align=\"center\">\r\n              {name}\r\n            </Heading>\r\n            <Center>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                {symbolTrimmed}\r\n              </Badge>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                # {tokenId}\r\n              </Badge>\r\n            </Center>\r\n            <Alert size=\"2xs\" status=\"error\" borderRadius=\"5px\">\r\n              <AlertIcon />\r\n              No Metadata was found!\r\n            </Alert>\r\n          </VStack>\r\n        </VStack>\r\n      </Box>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NftComponent;\r\n","import {\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  SimpleGrid,\r\n  Text,\r\n  VStack,\r\n} from \"@chakra-ui/layout\";\r\nimport { Divider } from \"@chakra-ui/react\";\r\nimport { Mapping } from \"./Mapping\";\r\nimport { NFT } from \"./NFT\";\r\nimport NftComponent from \"./NftComponent\";\r\n\r\nconst Collection = (props: Mapping) => {\r\n  return (\r\n    <>\r\n      <Box\r\n        overflow=\"scroll\"\r\n        p={2}\r\n        minWidth=\"100%\"\r\n        border=\"2px\"\r\n        borderRadius=\"12px\"\r\n        m={2}\r\n        borderColor=\"rgba(179,184,212,1)\"\r\n      >\r\n        <VStack>\r\n          <Heading>{props.collectionName}</Heading>\r\n          <Divider border=\"2px\" />\r\n        </VStack>\r\n        <SimpleGrid mt={5} minChildWidth=\"250px\" spacing=\"5px\">\r\n          {props.collectionValues &&\r\n            props.collectionValues.map((nft: NFT, i) => (\r\n              <NftComponent key={i} {...nft} />\r\n            ))}\r\n        </SimpleGrid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Collection;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { NFT } from \"./NFT\";\r\nimport { VStack } from \"@chakra-ui/react\";\r\nimport { Network } from \"../services/Network\";\r\nimport { Mapping } from \"./Mapping\";\r\nimport Collection from \"./Collection\";\r\n\r\nconst ContentBody = ({ chainId, name }: Network) => {\r\n  const { isAuthenticated, user } = useMoralis();\r\n\r\n  const { account } = useMoralisWeb3Api();\r\n\r\n  let mappedItemsEmpty: Mapping[] = [];\r\n  const [mappedItems, setMappedItems] = useState(mappedItemsEmpty);\r\n\r\n  const mapIt = (nftArray: NFT[]): Map<string, NFT[]> => {\r\n    let mapping = new Map<string, NFT[]>();\r\n    for (let nft of nftArray) {\r\n      if (!mapping.has(nft.token_address)) {\r\n        let arrayOfItems: NFT[] = [];\r\n        for (let nft2 of nftArray) {\r\n          if (nft2.token_address == nft.token_address) {\r\n            arrayOfItems.push(nft2);\r\n          }\r\n        }\r\n        mapping.set(nft.name, arrayOfItems);\r\n      }\r\n    }\r\n    return mapping;\r\n  };\r\n\r\n  const createMappingArray = (mapping: Map<string, NFT[]>): Mapping[] => {\r\n    let mappingArray: Mapping[] = [];\r\n    for (let key of mapping.entries()) {\r\n      let map: Mapping = mapItems(key[0], key[1]);\r\n      mappingArray.push(map);\r\n    }\r\n    return mappingArray;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      switch (name) {\r\n        case \"eth\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"eth\",\r\n              address: userAddr,\r\n            });\r\n            const nftArray = response.result!;\r\n            nftArray.sort((a, b) =>\r\n              a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n            );\r\n\r\n            let mapped: Map<string, NFT[]> = mapIt(nftArray);\r\n\r\n            setMappedItems(createMappingArray(mapped));\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n        case \"rinkeby\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"rinkeby\",\r\n              address: userAddr,\r\n            });\r\n            const nftArray = response.result!;\r\n            nftArray.sort((a, b) =>\r\n              a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n            );\r\n\r\n            let mapped: Map<string, NFT[]> = mapIt(nftArray);\r\n\r\n            setMappedItems(createMappingArray(mapped));\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n        case \"polygon\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"polygon\",\r\n              address: userAddr,\r\n            });\r\n            const nftArray = response.result!;\r\n            nftArray.sort((a, b) =>\r\n              a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n            );\r\n            let mapped: Map<string, NFT[]> = mapIt(nftArray);\r\n\r\n            setMappedItems(createMappingArray(mapped));\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }, [name, []]);\r\n\r\n  const mapItems = (key: string, values: NFT[]): Mapping => {\r\n    let mapper: Mapping = {\r\n      collectionName: key,\r\n      collectionValues: values,\r\n    };\r\n    return mapper;\r\n  };\r\n\r\n  const nftBoxes = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <VStack>\r\n          {mappedItems &&\r\n            mappedItems.map((map: Mapping, i) => (\r\n              <Collection key={i} {...map} />\r\n            ))}\r\n        </VStack>\r\n      );\r\n    } else {\r\n      return <></>;\r\n    }\r\n  };\r\n\r\n  return <div>{nftBoxes()}</div>;\r\n};\r\nexport default ContentBody;\r\n","import {\r\n  Heading,\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  Spacer,\r\n  useBreakpointValue,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Network } from \"../services/Network\";\r\n\r\nconst ContentHeader = ({ chainId, name }: Network) => {\r\n  const { isAuthenticated, user } = useMoralis();\r\n  const { account } = useMoralisWeb3Api();\r\n  const [nfts, setNfts] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      switch (name) {\r\n        case \"eth\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"eth\",\r\n              address: userAddr,\r\n            });\r\n            const numberOf = response.result!.length;\r\n            setNfts(numberOf);\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n        case \"rinkeby\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"rinkeby\",\r\n              address: userAddr,\r\n            });\r\n            const numberOf = response.result!.length;\r\n            setNfts(numberOf);\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n        case \"polygon\": {\r\n          const userAddr = user?.get(\"ethAddress\");\r\n          const fetchNFTs = async () => {\r\n            const response = await account.getNFTs({\r\n              chain: \"polygon\",\r\n              address: userAddr,\r\n            });\r\n            const numberOf = response.result!.length;\r\n            setNfts(numberOf);\r\n          };\r\n          fetchNFTs();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const collectedAmount = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <VStack>\r\n          <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n            Collected NFTs\r\n          </Heading>\r\n          <Text pl={2}>{nfts}</Text>\r\n        </VStack>\r\n      );\r\n    }\r\n  };\r\n\r\n  const collectedNFTs = useBreakpointValue({ base: \"\", md: collectedAmount() });\r\n\r\n  const addrSize = useBreakpointValue({ base: \"xs\", md: \"md\" });\r\n\r\n  const messageConnection = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <Text fontWeight=\"bold\" pl={2} fontSize={addrSize}>\r\n          {user?.get(\"ethAddress\")}\r\n        </Text>\r\n      );\r\n    } else {\r\n      return (\r\n        <Text fontWeight=\"bold\" pl={2}>\r\n          Please, connect your wallet.\r\n        </Text>\r\n      );\r\n    }\r\n  };\r\n\r\n  const HeaderOptions = () => {\r\n    return (\r\n      <div>\r\n        <Flex>\r\n          <Box>\r\n            <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n              {name}: NFT Collection\r\n            </Heading>\r\n            {messageConnection()}\r\n          </Box>\r\n          <Spacer />\r\n          {collectedNFTs}\r\n        </Flex>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return HeaderOptions();\r\n};\r\nexport default ContentHeader;\r\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Divider, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { Network } from \"../services/Network\";\r\nimport ContentBody from \"./ContentBody\";\r\nimport ContentHeader from \"./ContentHeader\";\r\n\r\nconst Content = ({ chainId, name }: Network) => {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n      h=\"95%\"\r\n      templateRows=\"repeat(7, 2fr)\"\r\n    >\r\n      <GridItem rowSpan={1}>\r\n        <ContentHeader chainId={chainId} name={name} />\r\n      </GridItem>\r\n      <GridItem rowSpan={1}>\r\n        <Divider border=\"2px\" />\r\n      </GridItem>\r\n      <GridItem mt={-10} rowSpan={5} overflowX=\"hidden\" overflowY=\"scroll\">\r\n        <ContentBody chainId={chainId} name={name} />\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import Moralis from \"moralis\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nfunction checkWeb3() {\r\n  SetWeb3Environment();\r\n}\r\n\r\nasync function SetWeb3Environment() {\r\n  const { logout } = useMoralis();\r\n\r\n  Moralis.Web3.onAccountsChanged(function () {\r\n    window.location.reload();\r\n    logout();\r\n  });\r\n}\r\n\r\nexport default checkWeb3;\r\n","import { Button, useBreakpointValue, useToast } from \"@chakra-ui/react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport checkWeb3 from \"../services/NetworkTracker\";\r\n\r\ninterface Web3Enabled {\r\n  hasWeb3: boolean;\r\n}\r\n\r\nconst AuthButtons = ({ hasWeb3 }: Web3Enabled) => {\r\n  const { authenticate, isAuthenticated, isAuthenticating, logout } =\r\n    useMoralis();\r\n\r\n  const values = useBreakpointValue({\r\n    base: \"Connect 👛\",\r\n    md: \"Connect Wallet 👛\",\r\n  });\r\n\r\n  const valuesConnected = useBreakpointValue({\r\n    base: \"Connected ✅\",\r\n  });\r\n\r\n  const toast = useToast();\r\n\r\n  const logoutWallet = () => {\r\n    logout();\r\n    toast({\r\n      title: \"Disconnected Succesfully\",\r\n      status: \"error\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  const AuthState = () => {\r\n    checkWeb3();\r\n    if (!hasWeb3) {\r\n      return (\r\n        <Button\r\n          m={2}\r\n          fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n          onClick={() => {\r\n            authenticate({\r\n              signingMessage: \"Sign message to confirm ownership of address\",\r\n            });\r\n          }}\r\n        >\r\n          Press to unlock your Metamask 👛\r\n        </Button>\r\n      );\r\n    } else {\r\n      if (isAuthenticated) {\r\n        return (\r\n          <Button\r\n            m={2}\r\n            fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n            onClick={() => {\r\n              logoutWallet();\r\n            }}\r\n          >\r\n            {valuesConnected}\r\n          </Button>\r\n        );\r\n      } else {\r\n        return (\r\n          <Button\r\n            m={2}\r\n            isLoading={isAuthenticating}\r\n            onClick={() => {\r\n              authenticate({\r\n                signingMessage: \"Sign message to confirm ownership of address\",\r\n              });\r\n            }}\r\n          >\r\n            {values}\r\n          </Button>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return AuthState();\r\n};\r\n\r\nexport default AuthButtons;\r\n","import { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { Button, useColorMode } from \"@chakra-ui/react\";\r\n\r\nfunction ThemeButton() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Button onClick={toggleColorMode} m={2}>\r\n      {colorMode === \"light\" ? <SunIcon color=\"gray.900\" /> : <MoonIcon />}\r\n    </Button>\r\n  );\r\n}\r\nexport default ThemeButton;\r\n","import { Button } from \"@chakra-ui/react\";\r\nimport { Network } from \"../services/Network\";\r\n\r\nconst NetworkButton = ({ chainId, name }: Network) => {\r\n  const capitalize = (): string => {\r\n    if (name) {\r\n      return name.charAt(0).toUpperCase() + name.slice(1);\r\n    } else {\r\n      return \"Unsupported!\";\r\n    }\r\n  };\r\n\r\n  let niceName: string = capitalize();\r\n\r\n  return (\r\n    <Button variant=\"outline\" isDisabled m={2}>\r\n      {niceName}\r\n    </Button>\r\n  );\r\n};\r\nexport default NetworkButton;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Flex,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  useBreakpointValue,\r\n  SimpleGrid,\r\n} from \"@chakra-ui/react\";\r\nimport AuthButtons from \"./AuthenticationButton\";\r\nimport ThemeButton from \"./ThemeButton\";\r\nimport { Network } from \"../services/Network\";\r\nimport NetworkButton from \"./NetworkButton\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Navbar.css\";\r\n\r\nconst showTitle = ({ chainId, name }: Network) => {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor=\"rgba(179,184,212,.2)\"\r\n      templateColumns=\"repeat(3, 1fr)\"\r\n    >\r\n      <GridItem colSpan={1}>\r\n        <Flex>\r\n          <Box p=\"2\">\r\n            <NavLink to=\"/dashboard\">\r\n              <Button fontSize={{ base: \"md\", lg: \"2xl\" }}>Dashboard</Button>\r\n            </NavLink>\r\n          </Box>\r\n          <Box p=\"2\">\r\n            <NavLink to=\"/mint\">\r\n              <Button fontSize={{ base: \"md\", lg: \"2xl\" }}>Mint</Button>\r\n            </NavLink>\r\n          </Box>\r\n        </Flex>\r\n      </GridItem>\r\n      <GridItem colSpan={1}>\r\n        <Center>\r\n          <Box p=\"2\">\r\n            <Heading fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n              NFT Dashboard\r\n            </Heading>\r\n          </Box>\r\n        </Center>\r\n      </GridItem>\r\n      <GridItem colSpan={1}>\r\n        <Box float=\"right\">\r\n          <NetworkButton chainId={chainId} name={name} />\r\n          <AuthButtons hasWeb3={true} />\r\n          <ThemeButton />\r\n        </Box>\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst showMobile = ({ chainId, name }: Network) => {\r\n  return (\r\n    <>\r\n      <SimpleGrid minChildWidth=\"150px\">\r\n        <NavLink to=\"/dashboard\">\r\n          <Button m={2} width=\"90%\">\r\n            Dashboard\r\n          </Button>\r\n        </NavLink>\r\n        <NavLink to=\"/mint\">\r\n          <Button m={2} width=\"90%\">\r\n            Mint\r\n          </Button>\r\n        </NavLink>\r\n        <NetworkButton chainId={chainId} name={name} />\r\n        <AuthButtons hasWeb3={true} />\r\n        <ThemeButton />\r\n      </SimpleGrid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Navbar = ({ chainId, name }: Network) => {\r\n  const title = useBreakpointValue({\r\n    base: showMobile({ chainId, name }),\r\n    md: showTitle({ chainId, name }),\r\n  });\r\n\r\n  return <>{title}</>;\r\n};\r\nexport default Navbar;\r\n","import Web3 from \"web3\";\r\n\r\nlet web3 = undefined;\r\n\r\nexport async function initWeb3() {\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum);\r\n    return true;\r\n  } else if (window.web3) {\r\n    web3 = new Web3(window.web3.currentProvider);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport async function getNetwork() {\r\n  if (window.ethereum || window.web3) {\r\n    return web3.eth.net.getId();\r\n  }\r\n}\r\n\r\nexport function getNetworkName(chainID) {\r\n  let networks = {\r\n    1: \"eth\",\r\n    4: \"rinkeby\",\r\n    137: \"polygon\",\r\n  };\r\n  return networks[chainID];\r\n}\r\n","import { Grid, GridItem, Link, Text, VStack } from \"@chakra-ui/layout\";\r\nimport \"./Dashboard.css\";\r\nimport Content from \"../components/Content\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport { initWeb3, getNetwork, getNetworkName } from \"../services/init\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Moralis from \"moralis\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\nfunction Dashboard() {\r\n  const [re, setRe] = useState(false);\r\n\r\n  const [hasWeb3, setWeb3] = useState(false);\r\n\r\n  let chainIdDefault: number = 1;\r\n  const [chainId, setChainId] = useState(chainIdDefault);\r\n\r\n  Moralis.Web3.onChainChanged(function () {\r\n    setRe(!re);\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function hasMetamask() {\r\n      let result = await initWeb3();\r\n      if (result) {\r\n        setWeb3(true);\r\n      } else setWeb3(false);\r\n    }\r\n    hasMetamask();\r\n\r\n    async function getTheChainId() {\r\n      let result = await getNetwork();\r\n      if (result) {\r\n        setChainId(result);\r\n      } else {\r\n        console.log(\"lol no chainId detection\");\r\n      }\r\n    }\r\n    getTheChainId();\r\n  });\r\n\r\n  if (hasWeb3) {\r\n    return (\r\n      <Grid templateRows=\"repeat(10,1fr)\" h=\"100vh\">\r\n        <GridItem rowSpan={1}>\r\n          <Navbar chainId={chainId} name={getNetworkName(chainId)}></Navbar>\r\n        </GridItem>\r\n        <GridItem rowSpan={9}>\r\n          <Content chainId={chainId} name={getNetworkName(chainId)} />\r\n        </GridItem>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"centeredChildren\">\r\n        <VStack>\r\n          <Text m={4} fontWeight=\"bold\">\r\n            No web3 wallet is detected. If you do, please unlock it and refresh.\r\n          </Text>\r\n          <Button onClick={() => window.location.reload()}>🔄 Refresh</Button>\r\n          <Link\r\n            href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\"\r\n            isExternal\r\n          >\r\n            <Button variant=\"outline\">🎁 Extension</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/skAH3BaF99\" isExternal>\r\n            <Button variant=\"outline\">🍎 App Store</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/bxwkE8oF99\" isExternal>\r\n            <Button variant=\"outline\">🤖 Play Store</Button>\r\n          </Link>\r\n        </VStack>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","const ABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: \"string\", name: \"_name\", type: \"string\" },\r\n      { internalType: \"string\", name: \"_symbol\", type: \"string\" },\r\n    ],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"approved\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"uint256\",\r\n        name: \"tokenId\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"operator\",\r\n        type: \"address\",\r\n      },\r\n      { indexed: false, internalType: \"bool\", name: \"approved\", type: \"bool\" },\r\n    ],\r\n    name: \"ApprovalForAll\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"previousOwner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newOwner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"OwnershipTransferred\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\r\n      {\r\n        indexed: true,\r\n        internalType: \"uint256\",\r\n        name: \"tokenId\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"PRICE\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"TOTAL_NUMBER_OF_NFTS\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"balanceOfContract\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\r\n    name: \"getApproved\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"getBaseURI\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\r\n    ],\r\n    name: \"isApprovedForAll\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"num\", type: \"uint256\" }],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"owner\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\r\n    name: \"ownerOf\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"renounceOwnership\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\r\n    ],\r\n    name: \"safeTransferFrom\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"_data\", type: \"bytes\" },\r\n    ],\r\n    name: \"safeTransferFrom\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\r\n      { internalType: \"bool\", name: \"approved\", type: \"bool\" },\r\n    ],\r\n    name: \"setApprovalForAll\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"string\", name: \"baseURI\", type: \"string\" }],\r\n    name: \"setBaseURI\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" }],\r\n    name: \"supportsInterface\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"index\", type: \"uint256\" }],\r\n    name: \"tokenByIndex\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"index\", type: \"uint256\" },\r\n    ],\r\n    name: \"tokenOfOwnerByIndex\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\r\n    name: \"tokenURI\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\r\n    name: \"transferOwnership\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_owner\", type: \"address\" }],\r\n    name: \"walletOfOwner\",\r\n    outputs: [{ internalType: \"uint256[]\", name: \"\", type: \"uint256[]\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"withdrawAll\",\r\n    outputs: [],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n];\r\nexport default ABI;\r\n","export default __webpack_public_path__ + \"static/media/hooray.be4173bf.gif\";","import { Network } from \"../services/Network\";\r\nimport ABI from \"../services/ContractABI\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Moralis } from \"moralis\";\r\nimport Web3 from \"web3\";\r\nimport { AbiItem } from \"web3-utils\";\r\nimport {\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  Text,\r\n  VStack,\r\n  Image,\r\n  useBreakpointValue,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport confirmationHooray from \"../assets/hooray.gif\";\r\n\r\nconst MintBody = ({ chainId, name }: Network) => {\r\n  const [txHash, setTxHash] = useState(\"\");\r\n  const [confirmed, setConfirmation] = useState(false);\r\n\r\n  const CONTRACT_ADDRESS = \"0xbc7dced78438d564057a0f7fdb216c6194411603\";\r\n  let web3 = undefined;\r\n  let account = undefined;\r\n  let contract = undefined;\r\n\r\n  const mintToken = async () => {\r\n    web3 = await Moralis.Web3.enable();\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    contract = new web3.eth.Contract(ABI as AbiItem[], CONTRACT_ADDRESS);\r\n    contract.defaultChain = \"rinkeby\";\r\n    account = accounts[0];\r\n\r\n    contract.methods\r\n      .mint(1)\r\n      .send({\r\n        from: account,\r\n        value: Web3.utils.toWei(\"0.001\", \"ether\"),\r\n      })\r\n      .on(\"transactionHash\", function (hash: string) {\r\n        setTxHash(hash);\r\n      })\r\n      .on(\"confirmation\", function () {\r\n        setConfirmation(true);\r\n      });\r\n  };\r\n\r\n  const values = useBreakpointValue({\r\n    base: (\r\n      <Button variant=\"outline\" fontWeight=\"bold\" m={5}>\r\n        Transaction\r\n      </Button>\r\n    ),\r\n    md: (\r\n      <Button variant=\"outline\" fontWeight=\"bold\" m={5}>\r\n        Transaction: {txHash}\r\n      </Button>\r\n    ),\r\n  });\r\n\r\n  const renderHash = () => {\r\n    if (txHash != \"\") {\r\n      const url = \"https://rinkeby.etherscan.io/tx/\" + txHash;\r\n      return (\r\n        <a\r\n          href={url}\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          title=\"Click to view transaction!\"\r\n        >\r\n          {values}\r\n        </a>\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const hooray = () => {\r\n    if (confirmed) {\r\n      return (\r\n        <VStack p={5}>\r\n          <Center>\r\n            <Text mb={2}>🎉 Successfully minted your NFT! 🎉</Text>\r\n          </Center>\r\n          <Image\r\n            borderRadius=\"md\"\r\n            src={confirmationHooray}\r\n            boxSize=\"200px\"\r\n          ></Image>\r\n          <Center>\r\n            <Text mb={2}>Head over to the Dashboard! 🍌</Text>\r\n          </Center>\r\n        </VStack>\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  if (name === \"rinkeby\") {\r\n    return (\r\n      <VStack>\r\n        <Button m={5} onClick={() => mintToken()}>\r\n          Mint!\r\n        </Button>\r\n        {renderHash()}\r\n        {hooray()}\r\n      </VStack>\r\n    );\r\n  } else {\r\n    return <Heading m={5}>Please, change network to Rinkeby</Heading>;\r\n  }\r\n};\r\n\r\nexport default MintBody;\r\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Center, Grid, GridItem, Heading, VStack } from \"@chakra-ui/layout\";\r\nimport ABI from \"../services/ContractABI\";\r\nimport { Network } from \"../services/Network\";\r\nimport MintBody from \"./MintBody\";\r\n\r\nconst MintComponent = ({ chainId, name }: Network) => {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n      h=\"95%\"\r\n      templateRows=\"repeat(7, 2fr)\"\r\n    >\r\n      <Center>\r\n        <VStack>\r\n          <GridItem p={5} rowSpan={2} overflowX=\"hidden\" overflowY=\"scroll\">\r\n            <Heading>Mint your NFT</Heading>\r\n          </GridItem>\r\n          <GridItem mt={-10} rowSpan={5} overflowX=\"hidden\" overflowY=\"scroll\">\r\n            <MintBody chainId={chainId} name={name} />\r\n          </GridItem>\r\n        </VStack>\r\n      </Center>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MintComponent;\r\n","import { Grid, GridItem, Link, Text, VStack } from \"@chakra-ui/layout\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport { initWeb3, getNetwork, getNetworkName } from \"../services/init\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Moralis from \"moralis\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport MintComponent from \"../components/MintComponent\";\r\n\r\nfunction Mint() {\r\n  const [re, setRe] = useState(false);\r\n\r\n  const [hasWeb3, setWeb3] = useState(false);\r\n\r\n  let chainIdDefault: number = 1;\r\n  const [chainId, setChainId] = useState(chainIdDefault);\r\n\r\n  Moralis.Web3.onChainChanged(function () {\r\n    setRe(!re);\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function hasMetamask() {\r\n      let result = await initWeb3();\r\n      if (result) {\r\n        setWeb3(true);\r\n      } else setWeb3(false);\r\n    }\r\n    hasMetamask();\r\n\r\n    async function getTheChainId() {\r\n      let result = await getNetwork();\r\n      if (result) {\r\n        setChainId(result);\r\n      } else {\r\n        console.log(\"lol no chainId detection\");\r\n      }\r\n    }\r\n    getTheChainId();\r\n  });\r\n\r\n  if (hasWeb3) {\r\n    return (\r\n      <Grid templateRows=\"repeat(10,1fr)\" h=\"100vh\">\r\n        <GridItem rowSpan={1}>\r\n          <Navbar chainId={chainId} name={getNetworkName(chainId)}></Navbar>\r\n        </GridItem>\r\n        <GridItem rowSpan={9}>\r\n          <MintComponent chainId={chainId} name={getNetworkName(chainId)} />\r\n        </GridItem>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"centeredChildren\">\r\n        <VStack>\r\n          <Text m={4} fontWeight=\"bold\">\r\n            No web3 wallet is detected. If you do, please unlock it and refresh.\r\n          </Text>\r\n          <Button onClick={() => window.location.reload()}>🔄 Refresh</Button>\r\n          <Link\r\n            href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\"\r\n            isExternal\r\n          >\r\n            <Button variant=\"outline\">🎁 Extension</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/skAH3BaF99\" isExternal>\r\n            <Button variant=\"outline\">🍎 App Store</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/bxwkE8oF99\" isExternal>\r\n            <Button variant=\"outline\">🤖 Play Store</Button>\r\n          </Link>\r\n        </VStack>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mint;\r\n","import { Route, BrowserRouter } from \"react-router-dom\";\r\nimport Dashboard from \"./pages/Dashboard\";\r\nimport Mint from \"./pages/Mint\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <Route exact path=\"/\" component={Dashboard} />\r\n        <Route path=\"/dashboard\" component={Dashboard} />\r\n        <Route path=\"/mint\" component={Mint} />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport { MoralisProvider } from \"react-moralis\";\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: \"dark\",\r\n  },\r\n});\r\n\r\nconst appId = \"hVGYho2GK4aUEF0YEDWrSGoo7fGNJ9XNDOG56ELu\";\r\nconst serverUrl = \"https://4wdhducezgqu.bigmoralis.com:2053/server\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\r\n      <ChakraProvider theme={theme}>\r\n        <App />\r\n      </ChakraProvider>\r\n    </MoralisProvider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}