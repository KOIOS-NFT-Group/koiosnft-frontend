{"version":3,"sources":["components/ContentHeader.tsx","components/Content.tsx","components/AuthenticationButton.tsx","components/ThemeButton.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContentHeader","useMoralis","isAuthenticated","user","userData","get","console","log","p","pl","fontSize","base","lg","HeaderOptions","Content","border","borderRadius","m","borderColor","useColorModeValue","h","templateRows","rowSpan","AuthButtons","authenticate","isAuthenticating","logout","md","onClick","className","isLoading","signingMessage","ThemeButton","useColorMode","colorMode","toggleColorMode","ml","Sun","color","Moon","Navbar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"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","file":"static/js/main.5cd3d3bc.chunk.js","sourcesContent":["import { Heading, Text } from \"@chakra-ui/react\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nfunction ContentHeader() {\r\n  const { isAuthenticated, user } = useMoralis();\r\n\r\n  const HeaderOptions = () => {\r\n    if (isAuthenticated) {\r\n      const userData = user?.get(\"ethAddress\");\r\n      console.log(userData);\r\n      return (\r\n        <div>\r\n          <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n            NFT Collection\r\n          </Heading>\r\n          <Text pl={2}>Address: {user?.get(\"ethAddress\")}</Text>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n            NFT Collection\r\n          </Heading>\r\n          <Text pl={2}>Please, connect your wallet.</Text>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return HeaderOptions();\r\n}\r\nexport default ContentHeader;\r\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Divider, Flex, Grid, GridItem, Text } from \"@chakra-ui/layout\";\r\nimport ContentHeader from \"./ContentHeader\";\r\n\r\nfunction Content() {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n      h=\"95%\"\r\n      templateRows=\"repeat(7, 2fr)\"\r\n    >\r\n      <GridItem rowSpan={1}>\r\n        <ContentHeader />\r\n      </GridItem>\r\n      <GridItem rowSpan={1}>\r\n        <Divider border=\"2px\" />\r\n      </GridItem>\r\n      <GridItem rowSpan={5}>\r\n        <Text>Test</Text>\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import { Button } from \"@chakra-ui/react\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nfunction AuthButtons() {\r\n  const { authenticate, isAuthenticated, isAuthenticating, logout } =\r\n    useMoralis();\r\n\r\n  const AuthState = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <Button\r\n          fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n          onClick={() => logout()}\r\n        >\r\n          Connected âœ…\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          className=\"authButtons\"\r\n          isLoading={isAuthenticating}\r\n          onClick={() =>\r\n            authenticate({\r\n              signingMessage: \"Sign message to confirm ownership of address\",\r\n            })\r\n          }\r\n        >\r\n          Connect Wallet ðŸ‘›\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return AuthState();\r\n}\r\n\r\nexport default AuthButtons;\r\n","import { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { Button, useColorMode } from \"@chakra-ui/react\";\r\n\r\nfunction ThemeButton() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Button onClick={toggleColorMode} ml={2}>\r\n      {colorMode === \"light\" ? <SunIcon color=\"gray.900\" /> : <MoonIcon />}\r\n    </Button>\r\n  );\r\n}\r\nexport default ThemeButton;\r\n","import { Box, Button, Flex, Heading, Spacer } from \"@chakra-ui/react\";\r\nimport AuthButtons from \"./AuthenticationButton\";\r\nimport ThemeButton from \"./ThemeButton\";\r\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <Flex\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n    >\r\n      <Box p=\"2\">\r\n        <Heading fontSize={{ base: \"md\", lg: \"2xl\" }}>NFT Dashboard</Heading>\r\n      </Box>\r\n      <Spacer />\r\n      <Box>\r\n        <AuthButtons />\r\n        <ThemeButton />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import { Flex, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport \"./app.scss\";\r\nimport Content from \"./components/Content\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid templateRows=\"repeat(10,1fr)\" h=\"100vh\">\r\n      <GridItem rowSpan={1}>\r\n        <Navbar></Navbar>\r\n      </GridItem>\r\n      <GridItem rowSpan={9}>\r\n        <Content />\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport { MoralisProvider } from \"react-moralis\";\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: \"dark\",\r\n  },\r\n});\r\n\r\nconst appId = \"hVGYho2GK4aUEF0YEDWrSGoo7fGNJ9XNDOG56ELu\";\r\nconst serverUrl = \"https://4wdhducezgqu.bigmoralis.com:2053/server\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\r\n      <ChakraProvider theme={theme}>\r\n        <App />\r\n      </ChakraProvider>\r\n    </MoralisProvider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}