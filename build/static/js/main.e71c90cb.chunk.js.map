{"version":3,"sources":["components/NftComponent.tsx","components/ContentBody.tsx","components/ContentHeader.tsx","components/Content.tsx","components/AuthenticationButton.tsx","components/ThemeButton.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NftComponent","token_address","token_id","metadata","owner_of","contract_type","token_uri","name","amount","symbol","meta","JSON","parse","bg","src","image","ContentBody","useMoralis","isAuthenticated","user","account","useMoralisWeb3Api","useState","nfts","setNfts","useEffect","userAddr","get","a","getNFTs","chain","address","response","nftArray","result","fetchNFTs","minChildWidth","spacing","map","nft","i","ContentHeader","numberOf","length","collectedNFTs","useBreakpointValue","base","md","p","pl","fontSize","lg","collectedAmount","fontWeight","Content","border","borderRadius","m","borderColor","useColorModeValue","h","templateRows","rowSpan","AuthButtons","authenticate","isAuthenticating","logout","values","valuesConnected","onClick","className","isLoading","signingMessage","ThemeButton","useColorMode","colorMode","toggleColorMode","ml","Sun","color","Moon","Navbar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"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","file":"static/js/main.e71c90cb.chunk.js","sourcesContent":["import { Box, Text } from \"@chakra-ui/layout\";\r\nimport { Metadata } from \"./Metadata\";\r\nimport { NFT } from \"./NFT\";\r\nimport { Image } from \"@chakra-ui/react\";\r\n\r\nconst NftComponent = ({\r\n  token_address,\r\n  token_id,\r\n  owner_of,\r\n  contract_type,\r\n  token_uri,\r\n  metadata,\r\n  amount,\r\n  name,\r\n  symbol,\r\n}: NFT) => {\r\n  if (metadata) {\r\n    let meta: Metadata = JSON.parse(metadata);\r\n\r\n    return (\r\n      <div>\r\n        <Box bg=\"tomato\">\r\n          <Image src={meta.image} />\r\n          <Text>Name:{name}</Text>\r\n          <Text>Symbol: {symbol}</Text>\r\n          <Text>Token ID: {token_id}</Text>\r\n          <Text>{meta.name}</Text>\r\n        </Box>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Box bg=\"tomato\">\r\n          <Text>Name:{name}</Text>\r\n          <Text>Symbol: {symbol}</Text>\r\n          <Text>Token ID: {token_id}</Text>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NftComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { NFT } from \"./NFT\";\r\nimport { SimpleGrid, Text } from \"@chakra-ui/react\";\r\nimport NftComponent from \"./NftComponent\";\r\nimport { NFTKey } from \"./NFTKey\";\r\n\r\nfunction ContentBody() {\r\n  const { isAuthenticated, user } = useMoralis();\r\n\r\n  const { account } = useMoralisWeb3Api();\r\n\r\n  let amountOfNfts: NFT[] = [];\r\n\r\n  const [nfts, setNfts] = useState(amountOfNfts);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const userAddr = user?.get(\"ethAddress\");\r\n      const fetchNFTs = async () => {\r\n        const response = await account.getNFTs({\r\n          chain: \"rinkeby\",\r\n          address: userAddr,\r\n        });\r\n        const nftArray = response.result!;\r\n\r\n        setNfts(nftArray);\r\n      };\r\n      fetchNFTs();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const nftBoxes = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <SimpleGrid minChildWidth=\"120px\" spacing=\"10px\">\r\n          {nfts.map((nft: NFT, i) => (\r\n            <NftComponent key={i} {...nft} />\r\n          ))}\r\n        </SimpleGrid>\r\n      );\r\n    } else {\r\n      return <Text>Connect wallet lol</Text>;\r\n    }\r\n  };\r\n\r\n  return <div>{nftBoxes()}</div>;\r\n}\r\nexport default ContentBody;\r\n","import {\r\n  Heading,\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  Spacer,\r\n  useBreakpointValue,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction ContentHeader() {\r\n  const { isAuthenticated, user } = useMoralis();\r\n  const { account } = useMoralisWeb3Api();\r\n  const [nfts, setNfts] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const userAddr = user?.get(\"ethAddress\");\r\n      const fetchNFTs = async () => {\r\n        const response = await account.getNFTs({\r\n          chain: \"rinkeby\",\r\n          address: userAddr,\r\n        });\r\n        const numberOf = response.result!.length;\r\n        setNfts(numberOf);\r\n      };\r\n      fetchNFTs();\r\n    }\r\n  });\r\n\r\n  const collectedAmount = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <VStack>\r\n          <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n            Collected NFTs\r\n          </Heading>\r\n          <Text pl={2}>{nfts}</Text>\r\n        </VStack>\r\n      );\r\n    }\r\n  };\r\n\r\n  const collectedNFTs = useBreakpointValue({ base: \"\", md: collectedAmount() });\r\n\r\n  const messageConnection = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <Text fontWeight=\"bold\" pl={2}>\r\n          Address: {user?.get(\"ethAddress\")}\r\n        </Text>\r\n      );\r\n    } else {\r\n      return (\r\n        <Text fontWeight=\"bold\" pl={2}>\r\n          Please, connect your wallet.\r\n        </Text>\r\n      );\r\n    }\r\n  };\r\n\r\n  const HeaderOptions = () => {\r\n    return (\r\n      <div>\r\n        <Flex>\r\n          <Box>\r\n            <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n              NFT Collection\r\n            </Heading>\r\n            {messageConnection()}\r\n          </Box>\r\n          <Spacer />\r\n          {collectedNFTs}\r\n        </Flex>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return HeaderOptions();\r\n}\r\nexport default ContentHeader;\r\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Divider, Flex, Grid, GridItem, Text } from \"@chakra-ui/layout\";\r\nimport ContentBody from \"./ContentBody\";\r\nimport ContentHeader from \"./ContentHeader\";\r\n\r\nfunction Content() {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n      h=\"95%\"\r\n      templateRows=\"repeat(7, 2fr)\"\r\n    >\r\n      <GridItem rowSpan={1}>\r\n        <ContentHeader />\r\n      </GridItem>\r\n      <GridItem rowSpan={1}>\r\n        <Divider border=\"2px\" />\r\n      </GridItem>\r\n      <GridItem rowSpan={5}>\r\n        <ContentBody />\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import { Button, useBreakpointValue } from \"@chakra-ui/react\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nfunction AuthButtons() {\r\n  const { authenticate, isAuthenticated, isAuthenticating, logout } =\r\n    useMoralis();\r\n\r\n  const values = useBreakpointValue({\r\n    base: \"Connect 👛\",\r\n    md: \"Connect Wallet 👛\",\r\n  });\r\n\r\n  const valuesConnected = useBreakpointValue({\r\n    base: \"Connected ✅\",\r\n  });\r\n\r\n  const AuthState = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <Button\r\n          fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n          onClick={() => logout()}\r\n        >\r\n          {valuesConnected}\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          className=\"authButtons\"\r\n          isLoading={isAuthenticating}\r\n          onClick={() =>\r\n            authenticate({\r\n              signingMessage: \"Sign message to confirm ownership of address\",\r\n            })\r\n          }\r\n        >\r\n          {values}\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  return AuthState();\r\n}\r\n\r\nexport default AuthButtons;\r\n","import { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { Button, useColorMode } from \"@chakra-ui/react\";\r\n\r\nfunction ThemeButton() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Button onClick={toggleColorMode} ml={2}>\r\n      {colorMode === \"light\" ? <SunIcon color=\"gray.900\" /> : <MoonIcon />}\r\n    </Button>\r\n  );\r\n}\r\nexport default ThemeButton;\r\n","import { Box, Button, Flex, Heading, Spacer } from \"@chakra-ui/react\";\r\nimport AuthButtons from \"./AuthenticationButton\";\r\nimport ThemeButton from \"./ThemeButton\";\r\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <Flex\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n    >\r\n      <Box p=\"2\">\r\n        <Heading fontSize={{ base: \"md\", lg: \"2xl\" }}>NFT Dashboard</Heading>\r\n      </Box>\r\n      <Spacer />\r\n      <Box>\r\n        <AuthButtons />\r\n        <ThemeButton />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import { Flex, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport \"./app.scss\";\r\nimport Content from \"./components/Content\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid templateRows=\"repeat(10,1fr)\" h=\"100vh\">\r\n      <GridItem rowSpan={1}>\r\n        <Navbar></Navbar>\r\n      </GridItem>\r\n      <GridItem rowSpan={9}>\r\n        <Content />\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport { MoralisProvider } from \"react-moralis\";\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: \"dark\",\r\n  },\r\n});\r\n\r\nconst appId = \"hVGYho2GK4aUEF0YEDWrSGoo7fGNJ9XNDOG56ELu\";\r\nconst serverUrl = \"https://4wdhducezgqu.bigmoralis.com:2053/server\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\r\n      <ChakraProvider theme={theme}>\r\n        <App />\r\n      </ChakraProvider>\r\n    </MoralisProvider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}