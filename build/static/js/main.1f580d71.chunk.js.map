{"version":3,"sources":["assets/placeholder.jpg","components/NftComponent.tsx","components/ContentBody.tsx","components/ContentHeader.tsx","components/Content.tsx","services/NetworkTracker.tsx","components/AuthenticationButton.tsx","components/ThemeButton.tsx","components/NetworkButton.tsx","components/Navbar.tsx","services/init.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NftComponent","token_address","token_id","metadata","owner_of","contract_type","token_uri","name","amount","symbol","meta","JSON","parse","bg","p","minWidth","border","borderRadius","m","borderColor","boxSize","objectFit","src","image","fontSize","px","colorScheme","fontWeight","PlaceholderIMG","size","status","ContentBody","useMoralis","isAuthenticated","user","account","useMoralisWeb3Api","useState","nfts","setNfts","useEffect","userAddr","get","a","getNFTs","chain","address","response","nftArray","result","fetchNFTs","minChildWidth","spacing","map","nft","i","ContentHeader","numberOf","length","collectedNFTs","useBreakpointValue","base","md","pl","lg","collectedAmount","trimmedAddress","slice","noTrimming","Content","useColorModeValue","h","templateRows","rowSpan","mt","overflowX","overflowY","logout","Moralis","Web3","onAccountsChanged","window","location","reload","checkWeb3","SetWeb3Environment","AuthButtons","hasWeb3","authenticate","isAuthenticating","values","valuesConnected","toast","useToast","onClick","title","duration","isClosable","isLoading","signingMessage","ThemeButton","useColorMode","colorMode","toggleColorMode","Sun","color","Moon","NetworkButton","chainId","variant","isDisabled","Navbar","web3","undefined","initWeb3","ethereum","enable","currentProvider","getNetwork","eth","net","getId","App","chainID","re","setRe","setWeb3","setChainId","onChainChanged","console","log","hasMetamask","getTheChainId","className","href","isExternal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","appId","serverUrl","document","getElementById"],"mappings":"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","file":"static/js/main.1f580d71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.dd2bd1b6.jpg\";","import {\r\n  Badge,\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  Spacer,\r\n  Text,\r\n  VStack,\r\n} from \"@chakra-ui/layout\";\r\nimport { Metadata } from \"./Metadata\";\r\nimport { NFT } from \"./NFT\";\r\nimport {\r\n  Alert,\r\n  AlertIcon,\r\n  Button,\r\n  Image,\r\n  useBreakpointValue,\r\n} from \"@chakra-ui/react\";\r\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport PlaceholderIMG from \"../assets/placeholder.jpg\";\r\n\r\n//const boxSize = useBreakpointValue({ base: \"\", md: boxLg() });\r\n\r\nconst NftComponent = ({\r\n  token_address,\r\n  token_id,\r\n  owner_of,\r\n  contract_type,\r\n  token_uri,\r\n  metadata,\r\n  amount,\r\n  name,\r\n  symbol,\r\n}: NFT) => {\r\n  if (metadata) {\r\n    let meta: Metadata = JSON.parse(metadata);\r\n\r\n    return (\r\n      <Box\r\n        bg=\"gray-100\"\r\n        p={2}\r\n        minWidth=\"200px\"\r\n        border=\"2px\"\r\n        borderRadius=\"12px\"\r\n        m={2}\r\n        borderColor=\"rgba(179,184,212,1)\"\r\n      >\r\n        <VStack>\r\n          <Image\r\n            boxSize=\"225px\"\r\n            borderRadius=\"12px\"\r\n            objectFit=\"cover\"\r\n            src={meta.image}\r\n          />\r\n          <Heading fontSize=\"md\">{name}</Heading>\r\n          <VStack>\r\n            <Center>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                {symbol}\r\n              </Badge>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                # {token_id}\r\n              </Badge>\r\n            </Center>\r\n            <Text borderRadius=\"5px\" px=\"5\" m={2} fontWeight=\"bold\">\r\n              {meta.name}\r\n            </Text>\r\n          </VStack>\r\n        </VStack>\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box\r\n        p={2}\r\n        border=\"2px\"\r\n        borderRadius=\"12px\"\r\n        m={2}\r\n        borderColor=\"rgba(179,184,212,1)\"\r\n      >\r\n        <VStack>\r\n          <Image\r\n            borderRadius=\"12px\"\r\n            boxSize=\"225px\"\r\n            objectFit=\"cover\"\r\n            src={PlaceholderIMG}\r\n          />\r\n          <VStack>\r\n            <Heading fontSize=\"md\">{name}</Heading>\r\n            <Center>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                {symbol}\r\n              </Badge>\r\n              <Badge borderRadius=\"5px\" px=\"5\" m={2} colorScheme=\"teal\">\r\n                # {token_id}\r\n              </Badge>\r\n            </Center>\r\n            <Alert size=\"2xs\" status=\"error\" borderRadius=\"5px\">\r\n              <AlertIcon />\r\n              No Metadata was found!\r\n            </Alert>\r\n          </VStack>\r\n        </VStack>\r\n      </Box>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NftComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { NFT } from \"./NFT\";\r\nimport { SimpleGrid, Text } from \"@chakra-ui/react\";\r\nimport NftComponent from \"./NftComponent\";\r\nimport { NFTKey } from \"./NFTKey\";\r\n\r\nfunction ContentBody() {\r\n  const { isAuthenticated, user } = useMoralis();\r\n\r\n  const { account } = useMoralisWeb3Api();\r\n\r\n  let amountOfNfts: NFT[] = [];\r\n\r\n  const [nfts, setNfts] = useState(amountOfNfts);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const userAddr = user?.get(\"ethAddress\");\r\n      const fetchNFTs = async () => {\r\n        const response = await account.getNFTs({\r\n          chain: \"rinkeby\",\r\n          address: userAddr,\r\n        });\r\n        const nftArray = response.result!;\r\n\r\n        setNfts(nftArray);\r\n      };\r\n      fetchNFTs();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const nftBoxes = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <SimpleGrid minChildWidth=\"250px\" spacing=\"5px\">\r\n          {nfts.map((nft: NFT, i) => (\r\n            <NftComponent key={i} {...nft} />\r\n          ))}\r\n        </SimpleGrid>\r\n      );\r\n    } else {\r\n      return <Text>Connect wallet lol</Text>;\r\n    }\r\n  };\r\n\r\n  return <div>{nftBoxes()}</div>;\r\n}\r\nexport default ContentBody;\r\n","import {\r\n  Heading,\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  Spacer,\r\n  useBreakpointValue,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction ContentHeader() {\r\n  const { isAuthenticated, user } = useMoralis();\r\n  const { account } = useMoralisWeb3Api();\r\n  const [nfts, setNfts] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const userAddr = user?.get(\"ethAddress\");\r\n      const fetchNFTs = async () => {\r\n        const response = await account.getNFTs({\r\n          chain: \"rinkeby\",\r\n          address: userAddr,\r\n        });\r\n        const numberOf = response.result!.length;\r\n        setNfts(numberOf);\r\n      };\r\n      fetchNFTs();\r\n    }\r\n  });\r\n\r\n  const collectedAmount = () => {\r\n    if (isAuthenticated) {\r\n      return (\r\n        <VStack>\r\n          <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n            Collected NFTs\r\n          </Heading>\r\n          <Text pl={2}>{nfts}</Text>\r\n        </VStack>\r\n      );\r\n    }\r\n  };\r\n\r\n  const collectedNFTs = useBreakpointValue({ base: \"\", md: collectedAmount() });\r\n\r\n  const addressTrimming = (address: string) => {\r\n    return (\r\n      <Text fontWeight=\"bold\" pl={2}>\r\n        {address.slice(0, 6)}...\r\n        {address.slice(address.length - 4, address.length)}\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  const noTrimming = (address: string) => {\r\n    return (\r\n      <Text fontWeight=\"bold\" pl={2}>\r\n        {address}\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  const trimmedAddress = useBreakpointValue({\r\n    base: addressTrimming(user?.get(\"ethAddress\")),\r\n    md: noTrimming(user?.get(\"ethAddress\")),\r\n  });\r\n\r\n  const messageConnection = () => {\r\n    if (isAuthenticated) {\r\n      return <div>{trimmedAddress}</div>;\r\n    } else {\r\n      return (\r\n        <Text fontWeight=\"bold\" pl={2}>\r\n          Please, connect your wallet.\r\n        </Text>\r\n      );\r\n    }\r\n  };\r\n\r\n  const HeaderOptions = () => {\r\n    return (\r\n      <div>\r\n        <Flex>\r\n          <Box>\r\n            <Heading p={4} pl={2} fontSize={{ base: \"md\", lg: \"2xl\" }}>\r\n              NFT Collection\r\n            </Heading>\r\n            {messageConnection()}\r\n          </Box>\r\n          <Spacer />\r\n          {collectedNFTs}\r\n        </Flex>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return HeaderOptions();\r\n}\r\nexport default ContentHeader;\r\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Divider, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport ContentBody from \"./ContentBody\";\r\nimport ContentHeader from \"./ContentHeader\";\r\n\r\nfunction Content() {\r\n  return (\r\n    <Grid\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n      h=\"95%\"\r\n      templateRows=\"repeat(7, 2fr)\"\r\n    >\r\n      <GridItem rowSpan={1}>\r\n        <ContentHeader />\r\n      </GridItem>\r\n      <GridItem rowSpan={1}>\r\n        <Divider border=\"2px\" />\r\n      </GridItem>\r\n      <GridItem mt={-10} rowSpan={5} overflowX=\"hidden\" overflowY=\"scroll\">\r\n        <ContentBody />\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import Moralis from \"moralis\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nfunction checkWeb3() {\r\n  SetWeb3Environment();\r\n}\r\n\r\nasync function SetWeb3Environment() {\r\n  const { logout } = useMoralis();\r\n\r\n  Moralis.Web3.onAccountsChanged(function () {\r\n    window.location.reload();\r\n    logout();\r\n  });\r\n}\r\n\r\nexport default checkWeb3;\r\n","import { Button, useBreakpointValue, useToast } from \"@chakra-ui/react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport checkWeb3 from \"../services/NetworkTracker\";\r\n\r\ninterface Web3Enabled {\r\n  hasWeb3: boolean;\r\n}\r\n\r\nconst AuthButtons = ({ hasWeb3 }: Web3Enabled) => {\r\n  const { authenticate, isAuthenticated, isAuthenticating, logout } =\r\n    useMoralis();\r\n\r\n  const values = useBreakpointValue({\r\n    base: \"Connect 👛\",\r\n    md: \"Connect Wallet 👛\",\r\n  });\r\n\r\n  const valuesConnected = useBreakpointValue({\r\n    base: \"Connected ✅\",\r\n  });\r\n\r\n  const toast = useToast();\r\n\r\n  const logoutWallet = () => {\r\n    logout();\r\n    toast({\r\n      title: \"Disconnected Succesfully\",\r\n      status: \"error\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  const AuthState = () => {\r\n    checkWeb3();\r\n    if (!hasWeb3) {\r\n      return (\r\n        <Button\r\n          m={2}\r\n          fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n          onClick={() => {\r\n            authenticate({\r\n              signingMessage: \"Sign message to confirm ownership of address\",\r\n            });\r\n          }}\r\n        >\r\n          Press to unlock your Metamask 👛\r\n        </Button>\r\n      );\r\n    } else {\r\n      if (isAuthenticated) {\r\n        return (\r\n          <Button\r\n            m={2}\r\n            fontSize={{ base: \"sm\", md: \"sm\", lg: \"md\" }}\r\n            onClick={() => {\r\n              logoutWallet();\r\n            }}\r\n          >\r\n            {valuesConnected}\r\n          </Button>\r\n        );\r\n      } else {\r\n        return (\r\n          <Button\r\n            m={2}\r\n            isLoading={isAuthenticating}\r\n            onClick={() => {\r\n              authenticate({\r\n                signingMessage: \"Sign message to confirm ownership of address\",\r\n              });\r\n            }}\r\n          >\r\n            {values}\r\n          </Button>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return AuthState();\r\n};\r\n\r\nexport default AuthButtons;\r\n","import { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { Button, useColorMode } from \"@chakra-ui/react\";\r\n\r\nfunction ThemeButton() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Button onClick={toggleColorMode} m={2}>\r\n      {colorMode === \"light\" ? <SunIcon color=\"gray.900\" /> : <MoonIcon />}\r\n    </Button>\r\n  );\r\n}\r\nexport default ThemeButton;\r\n","import { Button } from \"@chakra-ui/react\";\r\nimport { Network } from \"../services/Network\";\r\n\r\nconst NetworkButton = ({ chainId, name }: Network) => {\r\n  return (\r\n    <Button variant=\"outline\" isDisabled m={2}>\r\n      {name}\r\n    </Button>\r\n  );\r\n};\r\nexport default NetworkButton;\r\n","import { Box, Flex, Heading, Spacer } from \"@chakra-ui/react\";\r\nimport AuthButtons from \"./AuthenticationButton\";\r\nimport ThemeButton from \"./ThemeButton\";\r\nimport { useColorModeValue } from \"@chakra-ui/color-mode\";\r\nimport { Network } from \"../services/Network\";\r\nimport NetworkButton from \"./NetworkButton\";\r\n\r\nconst Navbar = ({ chainId, name }: Network) => {\r\n  return (\r\n    <Flex\r\n      p={2}\r\n      border=\"2px\"\r\n      borderRadius=\"12px\"\r\n      m={2}\r\n      borderColor={useColorModeValue(\r\n        \"rgba(179,184,212,1)\",\r\n        \"rgba(179,184,212,.2)\"\r\n      )}\r\n    >\r\n      <Box p=\"2\">\r\n        <Heading fontSize={{ base: \"md\", lg: \"2xl\" }}>NFT Dashboard</Heading>\r\n      </Box>\r\n      <Spacer />\r\n      <Box>\r\n        <NetworkButton chainId={chainId} name={name} />\r\n        <AuthButtons hasWeb3={true} />\r\n        <ThemeButton />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import Web3 from \"web3\";\r\n\r\nlet web3 = undefined;\r\n\r\nexport async function initWeb3() {\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum);\r\n    await window.ethereum.enable();\r\n    return true;\r\n  } else if (window.web3) {\r\n    web3 = new Web3(window.web3.currentProvider);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport async function getNetwork() {\r\n  if (window.ethereum || window.web3) {\r\n    return web3.eth.net.getId();\r\n  }\r\n}\r\n\r\nexport function getNetworkName(chainID) {\r\n  let networks = {\r\n    1: \"Mainnet 🍺\",\r\n    4: \"Rinkeby ☕️\",\r\n  };\r\n  return networks[chainID];\r\n}\r\n","import { Grid, GridItem, Link, Text, VStack } from \"@chakra-ui/layout\";\r\nimport \"./app.scss\";\r\nimport Content from \"./components/Content\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { initWeb3, getNetwork, getNetworkName } from \"./services/init\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Moralis from \"moralis\";\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\nfunction App() {\r\n  const [re, setRe] = useState(false);\r\n\r\n  const [hasWeb3, setWeb3] = useState(false);\r\n\r\n  let chainIdDefault: number = 1;\r\n  const [chainId, setChainId] = useState(chainIdDefault);\r\n\r\n  Moralis.Web3.onChainChanged(function () {\r\n    setRe(!re);\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function hasMetamask() {\r\n      let result = await initWeb3();\r\n      if (result) {\r\n        setWeb3(true);\r\n      } else setWeb3(false);\r\n    }\r\n    hasMetamask();\r\n\r\n    async function getTheChainId() {\r\n      let result = await getNetwork();\r\n      if (result) {\r\n        setChainId(result);\r\n      } else {\r\n        console.log(\"lol no chainId detection\");\r\n      }\r\n    }\r\n    getTheChainId();\r\n  });\r\n\r\n  if (hasWeb3) {\r\n    return (\r\n      <Grid templateRows=\"repeat(10,1fr)\" h=\"100vh\">\r\n        <GridItem rowSpan={1}>\r\n          <Navbar chainId={chainId} name={getNetworkName(chainId)}></Navbar>\r\n        </GridItem>\r\n        <GridItem rowSpan={9}>\r\n          <Content />\r\n        </GridItem>\r\n      </Grid>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"centeredChildren\">\r\n        <VStack>\r\n          <Text m={4} fontWeight=\"bold\">\r\n            No web3 wallet is detected. If you do, please unlock it and refresh.\r\n          </Text>\r\n          <Button onClick={() => window.location.reload()}>🔄 Refresh</Button>\r\n          <Link\r\n            href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\"\r\n            isExternal\r\n          >\r\n            <Button variant=\"outline\">🎁 Extension</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/skAH3BaF99\" isExternal>\r\n            <Button variant=\"outline\">🍎 App Store</Button>\r\n          </Link>\r\n          <Link href=\"https://metamask.app.link/bxwkE8oF99\" isExternal>\r\n            <Button variant=\"outline\">🤖 Play Store</Button>\r\n          </Link>\r\n        </VStack>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\r\nimport { MoralisProvider } from \"react-moralis\";\r\n\r\nconst theme = extendTheme({\r\n  config: {\r\n    initialColorMode: \"dark\",\r\n  },\r\n});\r\n\r\nconst appId = \"hVGYho2GK4aUEF0YEDWrSGoo7fGNJ9XNDOG56ELu\";\r\nconst serverUrl = \"https://4wdhducezgqu.bigmoralis.com:2053/server\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\r\n      <ChakraProvider theme={theme}>\r\n        <App />\r\n      </ChakraProvider>\r\n    </MoralisProvider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}